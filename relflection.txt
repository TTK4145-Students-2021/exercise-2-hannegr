Problem 4 

moving data around: in a message passing way. 
Elevator system of 4 elevators. Closest elevator should go. No elevator would know what good position it was in. message passing - good position
not many shared variables. 
Using concurrency for efficiency. 
Good argument for go instead of C, since go uses message passing. 
Want elevators to communicate about where they are. Too many global variables, which is really unsafe.
go had no global variable for i, only communicated about i. The only thing they did was communicating 
about the same variable in a non-sharing way. They made two channels add and sub, and used 
select to read out something in a channel and incrementing. 

We will use concurrency, and we will use message passing 


2. Goroutines, lightweigt threads that will communicate via channels. Go does not have objects, but we will pronbably use structs. 
Need lights, door obstruction, lights where you are going, lights where you are when you order an elevator. 
A big focus should be on errors. In the state diagram: start idle. For every error there should be an own aborted
state, a safe state not necessarily one state for every error we can have, but one safe state. 

Losing packages: you can send many packages and hope that they arrive or send a package and get an answer(like a flag)
"heartbeat": elevators expect messages. want to have package every time. If a package does not come, something has to be don. 
Have a clock in all modules. 
If we use that approach, and that happens, we can go into another state. One is master and one is slave.


3. Networking part: golang has a standard library called net. https://appliedgo.net/networking/
another alternative: gnet

4. go has a data race detector to handle race conditions. 
go also has a test library. 

5. IDE for go: goland, Visual Studio
analysis: analysis of sourcecode without actually running programs. For instance syntax, a library not imported correctly and so on. 
The debugger actually runs the code 
Both Visual Studio and Goland has analysis- and debuggingsupport for the go-code. 


